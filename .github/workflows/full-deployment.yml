name: Complete Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      deploy_terraform:
        description: 'Deploy Terraform infrastructure'
        type: boolean
        default: true
      deploy_nginx_ingress:
        description: 'Deploy Nginx Ingress'
        type: boolean
        default: true
      deploy_cert_manager:
        description: 'Deploy Cert Manager'
        type: boolean
        default: true
      deploy_app_of_apps:
        description: 'Deploy App of Apps'
        type: boolean
        default: true

jobs:
  terraform-infra:
    if: ${{ github.event.inputs.deploy_terraform == 'true' }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
      TF_VAR_private_key_content: ${{ secrets.PRIVATE_KEY_CONTENT }}
      TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
      TF_VAR_rds_username: ${{ secrets.RDS_USERNAME }}
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      - name: Download kubeconfig from S3 (if exists)
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./terraform/modules/compute/kubeconfig || true

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        continue-on-error: true
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Upload kubeconfig to S3
        run: aws s3 cp ./terraform/modules/compute/kubeconfig s3://my-terraform-backup-0701/kubeconfig

  nginx-ingress:
    needs: terraform-infra
    if: ${{ always() && (needs.terraform-infra.result == 'success' || needs.terraform-infra.result == 'skipped') && github.event.inputs.deploy_nginx_ingress == 'true' }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
      TF_VAR_private_key_content: ${{ secrets.PRIVATE_KEY_CONTENT }}
      TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
      TF_VAR_rds_username: ${{ secrets.RDS_USERNAME }}
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./terraform/modules/compute/kubeconfig

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Install Nginx Ingress via Terraform
        working-directory: ./terraform
        run: |
          terraform apply -target=helm_release.nginx_ingress -auto-approve
          terraform apply -target=null_resource.wait_for_nginx_ingress -auto-approve

  argocd-install:
    needs: nginx-ingress
    if: ${{ always() && (needs.nginx-ingress.result == 'success' || needs.nginx-ingress.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
      TF_VAR_private_key_content: ${{ secrets.PRIVATE_KEY_CONTENT }}
      TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
      TF_VAR_rds_username: ${{ secrets.RDS_USERNAME }}
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./terraform/modules/compute/kubeconfig

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Install ArgoCD via Terraform
        working-directory: ./terraform
        run: |
          terraform apply -target=helm_release.argocd -auto-approve
          terraform apply -target=null_resource.wait_for_argocd -auto-approve

      - name: Get and Store ArgoCD Initial Password
        working-directory: ./terraform
        run: |
          # Wait for ArgoCD to be ready
          kubectl --kubeconfig=./modules/compute/kubeconfig -n argocd rollout status deployment argocd-server --timeout=300s
          
          # Wait for initial admin password to be available
          echo "Waiting for ArgoCD initial admin password..."
          for i in {1..30}; do
            if kubectl --kubeconfig=./modules/compute/kubeconfig -n argocd get secret argocd-initial-admin-password &>/dev/null; then
              echo "Found initial admin password"
              break
            fi
            echo "Waiting for initial admin password... ($i/30)"
            sleep 10
          done
          
          # Get the initial admin password
          INITIAL_PASSWORD=$(kubectl --kubeconfig=./modules/compute/kubeconfig -n argocd get secret argocd-initial-admin-password -o jsonpath="{.data.password}" | base64 -d)
          
          if [ -z "$INITIAL_PASSWORD" ]; then
            echo "Error: Could not retrieve initial admin password"
            exit 1
          fi
          
          # Save password to file
          echo "$INITIAL_PASSWORD" > argocd-admin-password.txt
          
          # Upload to S3
          aws s3 cp argocd-admin-password.txt s3://my-terraform-backup-0701/argocd-admin-password.txt
          
          # Clean up local file
          rm argocd-admin-password.txt
          
          echo "-----------------------------------------------"
          echo "ArgoCD initial admin password has been stored in S3"
          echo "You can retrieve it using:"
          echo "aws s3 cp s3://my-terraform-backup-0701/argocd-admin-password.txt -"
          echo "-----------------------------------------------"

  aws-secret-setup:
    needs: argocd-install
    if: ${{ always() && (needs.argocd-install.result == 'success' || needs.argocd-install.result == 'skipped') && github.event.inputs.deploy_cert_manager == 'true' }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"
      ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
      AWS_HOSTED_ZONE_ID: ${{ secrets.AWS_HOSTED_ZONE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./kubeconfig.yaml

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create namespace and secrets
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          # Create cert-manager namespace directly
          echo "Creating cert-manager namespace..."
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
          
          # Create AWS credentials secret for Route53 DNS01 challenge
          echo "Creating Route53 credentials secret..."
          kubectl -n cert-manager create secret generic route53-credentials-secret \
            --from-literal=secret-access-key="$AWS_SECRET_ACCESS_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create a secret with email and hosted zone ID for the cluster issuer
          echo "Creating configuration secret..."
          kubectl -n cert-manager create secret generic cert-manager-issuer-config \
            --from-literal=acme-email="$ACME_EMAIL" \
            --from-literal=hosted-zone-id="$AWS_HOSTED_ZONE_ID" \
            --from-literal=access-key-id="$AWS_ACCESS_KEY_ID" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "AWS Credentials and configuration secrets created in cert-manager namespace"
          
  app-of-apps-deploy:
    needs: [aws-secret-setup]
    if: ${{ always() && (needs.aws-secret-setup.result == 'success' || needs.aws-secret-setup.result == 'skipped') && github.event.inputs.deploy_app_of_apps == 'true' }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"
      ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
      AWS_HOSTED_ZONE_ID: ${{ secrets.AWS_HOSTED_ZONE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./kubeconfig

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Wait for ArgoCD to be ready (from Terraform)
        env:
          KUBECONFIG: ./kubeconfig
        run: |
          # Check if ArgoCD namespace exists
          echo "Checking for ArgoCD namespace..."
          kubectl get namespace argocd || true
          
          # Wait for ArgoCD server to be ready
          echo "Waiting for ArgoCD server to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || true

      - name: Apply app-of-apps.yaml
        env:
          KUBECONFIG: ./kubeconfig
        run: kubectl apply -f ./apps/app-of-apps.yaml
        
      - name: Wait for cert-manager CRDs
        env:
          KUBECONFIG: ./kubeconfig
        run: |
          # Add the kubectl wait loop with timeout
          echo "Deploying apps through ArgoCD. This will take some time..."
          echo "Waiting for cert-manager CRDs to be established (timeout: 5 minutes)..."
          
          # Try for up to 5 minutes (30 x 10s = 300s = 5min)
          for i in {1..30}; do
            if kubectl get crd | grep -q "cert-manager.io"; then
              echo "cert-manager CRDs are installed"
              break
            fi
            echo "Waiting for cert-manager CRDs... ($i/30)"
            sleep 10
          done
          
          # Validate that the CRDs are actually installed
          if ! kubectl get crd | grep -q "cert-manager.io"; then
            echo "Warning: cert-manager CRDs were not detected, but continuing anyway."
          fi
          
          # Wait a bit more for the deployment to complete
          echo "Giving cert-manager some time to fully initialize..."
          sleep 30

      - name: Patch ClusterIssuer with credentials
        env:
          KUBECONFIG: ./kubeconfig
        run: |
          # Wait for the ClusterIssuer to be created and patch it
          echo "Waiting for ClusterIssuer to be created by ArgoCD..."
          for i in {1..30}; do
            if kubectl get clusterissuer letsencrypt-prod 2>/dev/null; then
              echo "Patching ClusterIssuer with credentials..."
              kubectl patch clusterissuer letsencrypt-prod --type=json -p='[
                {"op": "replace", "path": "/spec/acme/email", "value": "'"$ACME_EMAIL"'"},
                {"op": "replace", "path": "/spec/acme/solvers/0/dns01/route53/hostedZoneID", "value": "'"$AWS_HOSTED_ZONE_ID"'"},
                {"op": "replace", "path": "/spec/acme/solvers/0/dns01/route53/accessKeyID", "value": "'"$AWS_ACCESS_KEY_ID"'"}
              ]'
              echo "ClusterIssuer patched successfully!"
              break
            fi
            echo "Waiting for ClusterIssuer... ($i/30)"
            sleep 10
          done
          
          # If ClusterIssuer isn't found after the wait, report but don't fail
          if ! kubectl get clusterissuer letsencrypt-prod 2>/dev/null; then
            echo "Warning: ClusterIssuer 'letsencrypt-prod' was not found after waiting. It may be created later by ArgoCD."
          fi

  dns-management:
    needs: [terraform-infra]
    if: ${{ always() && (needs.terraform-infra.result == 'success' || needs.terraform-infra.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
      TF_VAR_private_key_content: ${{ secrets.PRIVATE_KEY_CONTENT }}
      TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
      TF_VAR_rds_username: ${{ secrets.RDS_USERNAME }}
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./terraform/modules/compute/kubeconfig

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Apply DNS Configuration with Terraform
        working-directory: ./terraform
        run: |
          terraform apply -target=data.aws_route53_zone.main -target=data.aws_instances.k3s_instances -target=aws_route53_record.service_records -auto-approve
          
          # Output the created DNS records more reliably without using jq
          echo "DNS entries updated through Terraform:"
          terraform output dns_records | sed 's/{//g' | sed 's/}//g' | sed 's/"//g' | tr -d '\n' | sed 's/,/\n/g'

  deployment-summary:
    needs: [terraform-infra, nginx-ingress, argocd-install, aws-secret-setup, app-of-apps-deploy, dns-management]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summarize Deployment
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Infrastructure | ${{ needs.terraform-infra.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Nginx Ingress | ${{ needs.nginx-ingress.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ArgoCD Installation | ${{ needs.argocd-install.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AWS Secret Setup | ${{ needs.aws-secret-setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| App of Apps | ${{ needs.app-of-apps-deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DNS Management | ${{ needs.dns-management.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-infra.result }}" == "success" && "${{ needs.nginx-ingress.result }}" == "success" && "${{ needs.argocd-install.result }}" == "success" && "${{ needs.aws-secret-setup.result }}" == "success" && "${{ needs.app-of-apps-deploy.result }}" == "success" && "${{ needs.dns-management.result }}" == "success" ]]; then
            echo "✅ **Complete deployment successful!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "You can now access:" >> $GITHUB_STEP_SUMMARY
            echo "- ArgoCD: https://argocd.thongit.space:30443" >> $GITHUB_STEP_SUMMARY
            echo "- Grafana: https://grafana.thongit.space:30443" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Deployment had some issues!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more details." >> $GITHUB_STEP_SUMMARY
          fi 