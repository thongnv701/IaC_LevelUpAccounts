name: Terraform CI/CD
on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: terraform 

    env:
      TF_VAR_allowed_cidr: ${{ secrets.ALLOWED_CIDR }}
      # For file paths, note that the runner must have access to that file.
      # Generally you'll store the private_key_content rather than a file path,
      # and then have a step that writes it to disk if needed.
      TF_VAR_private_key_content: ${{ secrets.PRIVATE_KEY_CONTENT }}
      TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
      TF_VAR_rds_username: ${{ secrets.RDS_USERNAME }}
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      # If you have other variables that aren't sensitive, you can pass those too.
      # Optionally, TF_VAR_private_key_path if your runner has this file.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      # Try to download kubeconfig if it exists (ignore errors if not found)
      - name: Download kubeconfig from S3
        run: aws s3 cp s3://my-terraform-backup-0701/kubeconfig ./terraform/modules/compute/kubeconfig || true

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # - name: Terraform Plan
      #   working-directory: ./terraform
      #   run: terraform plan -out=tfplan

      - name: Terraform Apply
        continue-on-error: true
        working-directory: ./terraform
        run: terraform apply -auto-approve # tfplan

      - name: List compute module files
        run: ls -l ./terraform/modules/compute/

      - name: Upload kubeconfig to S3
        run: aws s3 cp ./terraform/modules/compute/kubeconfig s3://my-terraform-backup-0701/kubeconfig